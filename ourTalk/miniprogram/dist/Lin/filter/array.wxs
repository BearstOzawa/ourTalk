var is = require("is.wxs");

function _isArray(targetArray, funName) {
    if (!is.isArray(targetArray)) {
        console.log('[WXS:Array]' + funName + ',targetArray must be array');
        return (false)
    };
    return (true)
};

function concat() {
    arguments.length = arguments.length;
    var length = arguments.length;
    var result = [];
    var validatorArray = _isArray(arguments[(0)], 'concat');
    if (validatorArray) {
        for (var i = 1; i < length; i++) {
            result = arguments[(0)].concat(arguments[((nt_2 = (i), null == nt_2 ? undefined : 'number' === typeof nt_2 ? nt_2 : "" + nt_2))])
        };
        return (result)
    }
};

function join(targetArray, spearator) {
    arguments.length = arguments.length;
    var validatorArray = _isArray(arguments[(0)], 'concat');
    if (validatorArray) return (targetArray.join(spearator));
};

function pop(targetArray) {
    arguments.length = arguments.length;
    var validatorArray = _isArray(arguments[(0)], 'pop');
    if (validatorArray) {
        var result = targetArray.pop();
        return (({
            newArray: targetArray,
            item: result,
        }))
    }
};

function shift(targetArray) {
    arguments.length = arguments.length;
    var validatorArray = _isArray(arguments[(0)], 'shift');
    if (validatorArray) {
        var result = targetArray.shift();
        return (({
            newArray: targetArray,
            item: result,
        }))
    }
};

function push() {
    arguments.length = arguments.length;
    var length = arguments.length;
    var validatorArray = _isArray(arguments[(0)], 'push');
    if (validatorArray) {
        for (var i = 1; i < length; i++) {
            arguments[(0)].push(arguments[((nt_8 = (i), null == nt_8 ? undefined : 'number' === typeof nt_8 ? nt_8 : "" + nt_8))])
        };
        return (arguments[(0)])
    }
};

function unshift(targetArray) {
    arguments.length = arguments.length;
    var length = arguments.length;
    var validatorArray = _isArray(arguments[(0)], 'unshift');
    if (validatorArray) {
        for (var i = length - 1; i > 0; i--) {
            arguments[(0)].unshift(arguments[((nt_12 = (i), null == nt_12 ? undefined : 'number' === typeof nt_12 ? nt_12 : "" + nt_12))])
        };
        return (arguments[(0)])
    }
};

function reverse(targetArray) {
    var validatorArray = _isArray(targetArray, 'reverse');
    if (validatorArray) return (targetArray.reverse());
};

function slice(targetArray, beginSlice, endSlice) {
    var validatorArray = _isArray(targetArray, 'slice');
    if (validatorArray) return (targetArray.slice(beginSlice, endSlice));
};

function splice(targetArray, start, deleteCount) {
    arguments.length = arguments.length;
    var validatorArray = _isArray(targetArray, 'splice');
    if (validatorArray) {
        if (arguments.length < 4) {
            targetArray.splice(start, deleteCount)
        } else {
            targetArray.splice(start, deleteCount, arguments[(3)]);
            var length = arguments.length;
            for (var i = 4; i < length; i++) {
                arguments[((nt_15 = (i), null == nt_15 ? undefined : 'number' === typeof nt_15 ? nt_15 : "" + nt_15))] && targetArray.splice(++start, 0, arguments[((nt_16 = (i), null == nt_16 ? undefined : 'number' === typeof nt_16 ? nt_16 : "" + nt_16))])
            }
        };
        return (targetArray)
    }
};

function indexOf(targetArray, searchValue, fromIndex) {
    fromIndex = undefined === fromIndex ? 0 : fromIndex;
    var validatorArray = _isArray(targetArray, 'indexOf');
    if (validatorArray) return (targetArray.indexOf(searchValue, fromIndex));
};

function lastIndexOf(targetArray, searchValue, fromIndex) {
    fromIndex = undefined === fromIndex ? 0 : fromIndex;
    var validatorArray = _isArray(targetArray, 'lastIndexOf');
    if (validatorArray) return (targetArray.lastIndexOf(searchValue, fromIndex || targetArray.length));
};
module.exports = ({
    concat: concat,
    join: join,
    pop: pop,
    shift: shift,
    push: push,
    unshift: unshift,
    reverse: reverse,
    slice: slice,
    splice: splice,
    indexOf: indexOf,
    lastIndexOf: lastIndexOf,
});